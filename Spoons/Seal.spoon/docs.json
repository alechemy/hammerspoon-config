[
  {
    "Constant" : [

    ],
    "submodules" : [
      "plugins"
    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "name" : "plugin_search_paths",
        "desc" : "List of directories where Seal will look for plugins. Defaults to `~\/.hammerspoon\/seal_plugins\/` and the Seal Spoon directory.",
        "stripped_doc" : [
          "List of directories where Seal will look for plugins. Defaults to `~\/.hammerspoon\/seal_plugins\/` and the Seal Spoon directory."
        ],
        "doc" : "List of directories where Seal will look for plugins. Defaults to `~\/.hammerspoon\/seal_plugins\/` and the Seal Spoon directory.",
        "notes" : [

        ],
        "signature" : "Seal.plugin_search_paths",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Seal.plugin_search_paths",
        "parameters" : [

        ]
      }
    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "desc" : "Pluggable launch bar",
    "type" : "Module",
    "Constructor" : [

    ],
    "items" : [
      {
        "name" : "plugin_search_paths",
        "desc" : "List of directories where Seal will look for plugins. Defaults to `~\/.hammerspoon\/seal_plugins\/` and the Seal Spoon directory.",
        "stripped_doc" : [
          "List of directories where Seal will look for plugins. Defaults to `~\/.hammerspoon\/seal_plugins\/` and the Seal Spoon directory."
        ],
        "doc" : "List of directories where Seal will look for plugins. Defaults to `~\/.hammerspoon\/seal_plugins\/` and the Seal Spoon directory.",
        "notes" : [

        ],
        "signature" : "Seal.plugin_search_paths",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Seal.plugin_search_paths",
        "parameters" : [

        ]
      },
      {
        "name" : "bindHotkeys",
        "desc" : "Binds hotkeys for Seal",
        "stripped_doc" : [
          "Binds hotkeys for Seal",
          ""
        ],
        "doc" : "Binds hotkeys for Seal\n\nParameters:\n * mapping - A table containing hotkey modifier\/key details for the following (optional) items:\n  * show - This will cause Seal's UI to be shown\n  * toggle - This will cause Seal's UI to be shown or hidden depending on its current state\n\nReturns:\n * The Seal object",
        "notes" : [

        ],
        "signature" : "Seal:bindHotkeys(mapping)",
        "type" : "Method",
        "returns" : [
          " * The Seal object"
        ],
        "def" : "Seal:bindHotkeys(mapping)",
        "parameters" : [
          " * mapping - A table containing hotkey modifier\/key details for the following (optional) items:",
          "  * show - This will cause Seal's UI to be shown",
          "  * toggle - This will cause Seal's UI to be shown or hidden depending on its current state",
          ""
        ]
      },
      {
        "name" : "loadPluginFromFile",
        "desc" : "Loads a plugin from a given file",
        "stripped_doc" : [
          "Loads a plugin from a given file",
          ""
        ],
        "doc" : "Loads a plugin from a given file\n\nParameters:\n * plugin_name - the name of the plugin, without \"seal_\" at the beginning or \".lua\" at the end\n * file - the file where the plugin code is stored.\n\nReturns:\n * The Seal object if the plugin was successfully loaded, `nil` otherwise\n\nNotes:\n * You should normally use `Seal:loadPlugins()`. This method allows you to load plugins\n   from non-standard locations and is mostly a development interface.\n * Some plugins may immediately begin doing background work (e.g. Spotlight searches)",
        "notes" : [
          " * You should normally use `Seal:loadPlugins()`. This method allows you to load plugins",
          "   from non-standard locations and is mostly a development interface.",
          " * Some plugins may immediately begin doing background work (e.g. Spotlight searches)"
        ],
        "signature" : "Seal:loadPluginFromFile(plugin_name, file)",
        "type" : "Method",
        "returns" : [
          " * The Seal object if the plugin was successfully loaded, `nil` otherwise",
          ""
        ],
        "def" : "Seal:loadPluginFromFile(plugin_name, file)",
        "parameters" : [
          " * plugin_name - the name of the plugin, without \"seal_\" at the beginning or \".lua\" at the end",
          " * file - the file where the plugin code is stored.",
          ""
        ]
      },
      {
        "name" : "loadPlugins",
        "desc" : "Loads a list of Seal plugins",
        "stripped_doc" : [
          "Loads a list of Seal plugins",
          ""
        ],
        "doc" : "Loads a list of Seal plugins\n\nParameters:\n * plugins - A list containing the names of plugins to load\n\nReturns:\n * The Seal object\n\nNotes:\n * The plugins live inside the Seal.spoon directory\n * The plugin names in the list, should not have `seal_` at the start, or `.lua` at the end\n * Some plugins may immediately begin doing background work (e.g. Spotlight searches)",
        "notes" : [
          " * The plugins live inside the Seal.spoon directory",
          " * The plugin names in the list, should not have `seal_` at the start, or `.lua` at the end",
          " * Some plugins may immediately begin doing background work (e.g. Spotlight searches)"
        ],
        "signature" : "Seal:loadPlugins(plugins)",
        "type" : "Method",
        "returns" : [
          " * The Seal object",
          ""
        ],
        "def" : "Seal:loadPlugins(plugins)",
        "parameters" : [
          " * plugins - A list containing the names of plugins to load",
          ""
        ]
      },
      {
        "name" : "refreshAllCommands",
        "desc" : "Refresh the list of commands provided by all the currently loaded plugins.",
        "stripped_doc" : [
          "Refresh the list of commands provided by all the currently loaded plugins.",
          ""
        ],
        "doc" : "Refresh the list of commands provided by all the currently loaded plugins.\n\nParameters:\n * None\n\nReturns:\n * The Seal object\n\nNotes:\n * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands.",
        "notes" : [
          " * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands."
        ],
        "signature" : "Seal:refreshAllCommands()",
        "type" : "Method",
        "returns" : [
          " * The Seal object",
          ""
        ],
        "def" : "Seal:refreshAllCommands()",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "name" : "refreshCommandsForPlugin",
        "desc" : "Refresh the list of commands provided by the given plugin.",
        "stripped_doc" : [
          "Refresh the list of commands provided by the given plugin.",
          ""
        ],
        "doc" : "Refresh the list of commands provided by the given plugin.\n\nParameters:\n * plugin_name - the name of the plugin. Should be the name as passed to `loadPlugins()` or `loadPluginFromFile`.\n\nReturns:\n * The Seal object\n\nNotes:\n * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands.",
        "notes" : [
          " * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands."
        ],
        "signature" : "Seal:refreshCommandsForPlugin(plugin_name)",
        "type" : "Method",
        "returns" : [
          " * The Seal object",
          ""
        ],
        "def" : "Seal:refreshCommandsForPlugin(plugin_name)",
        "parameters" : [
          " * plugin_name - the name of the plugin. Should be the name as passed to `loadPlugins()` or `loadPluginFromFile`.",
          ""
        ]
      },
      {
        "name" : "show",
        "desc" : "Shows the Seal UI",
        "stripped_doc" : [
          "Shows the Seal UI",
          ""
        ],
        "doc" : "Shows the Seal UI\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * This may be useful if you wish to show Seal in response to something other than its hotkey",
        "notes" : [
          " * This may be useful if you wish to show Seal in response to something other than its hotkey"
        ],
        "signature" : "Seal:show()",
        "type" : "Method",
        "returns" : [
          " * None",
          ""
        ],
        "def" : "Seal:show()",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "name" : "start",
        "desc" : "Starts Seal",
        "stripped_doc" : [
          "Starts Seal",
          ""
        ],
        "doc" : "Starts Seal\n\nParameters:\n * None\n\nReturns:\n * The Seal object",
        "notes" : [

        ],
        "signature" : "Seal:start()",
        "type" : "Method",
        "returns" : [
          " * The Seal object"
        ],
        "def" : "Seal:start()",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "name" : "stop",
        "desc" : "Stops Seal",
        "stripped_doc" : [
          "Stops Seal",
          ""
        ],
        "doc" : "Stops Seal\n\nParameters:\n * None\n\nReturns:\n * The Seal object\n\nNotes:\n * Some Seal plugins will continue performing background work even after this call (e.g. Spotlight searches)",
        "notes" : [
          " * Some Seal plugins will continue performing background work even after this call (e.g. Spotlight searches)"
        ],
        "signature" : "Seal:stop()",
        "type" : "Method",
        "returns" : [
          " * The Seal object",
          ""
        ],
        "def" : "Seal:stop()",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "name" : "toggle",
        "desc" : "Shows or hides the Seal UI",
        "stripped_doc" : [
          "Shows or hides the Seal UI",
          ""
        ],
        "doc" : "Shows or hides the Seal UI\n\nParameters:\n * None\n\nReturns:\n * None",
        "notes" : [

        ],
        "signature" : "Seal:toggle()",
        "type" : "Method",
        "returns" : [
          " * None"
        ],
        "def" : "Seal:toggle()",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "name" : "refreshCommandsForPlugin",
        "desc" : "Refresh the list of commands provided by the given plugin.",
        "stripped_doc" : [
          "Refresh the list of commands provided by the given plugin.",
          ""
        ],
        "doc" : "Refresh the list of commands provided by the given plugin.\n\nParameters:\n * plugin_name - the name of the plugin. Should be the name as passed to `loadPlugins()` or `loadPluginFromFile`.\n\nReturns:\n * The Seal object\n\nNotes:\n * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands.",
        "notes" : [
          " * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands."
        ],
        "signature" : "Seal:refreshCommandsForPlugin(plugin_name)",
        "type" : "Method",
        "returns" : [
          " * The Seal object",
          ""
        ],
        "def" : "Seal:refreshCommandsForPlugin(plugin_name)",
        "parameters" : [
          " * plugin_name - the name of the plugin. Should be the name as passed to `loadPlugins()` or `loadPluginFromFile`.",
          ""
        ]
      },
      {
        "name" : "refreshAllCommands",
        "desc" : "Refresh the list of commands provided by all the currently loaded plugins.",
        "stripped_doc" : [
          "Refresh the list of commands provided by all the currently loaded plugins.",
          ""
        ],
        "doc" : "Refresh the list of commands provided by all the currently loaded plugins.\n\nParameters:\n * None\n\nReturns:\n * The Seal object\n\nNotes:\n * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands.",
        "notes" : [
          " * Most Seal plugins expose a static list of commands (if any), which are registered at the time the plugin is loaded. This method is used for plugins which expose a dynamic or changing (e.g. depending on configuration) list of commands."
        ],
        "signature" : "Seal:refreshAllCommands()",
        "type" : "Method",
        "returns" : [
          " * The Seal object",
          ""
        ],
        "def" : "Seal:refreshAllCommands()",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "name" : "loadPluginFromFile",
        "desc" : "Loads a plugin from a given file",
        "stripped_doc" : [
          "Loads a plugin from a given file",
          ""
        ],
        "doc" : "Loads a plugin from a given file\n\nParameters:\n * plugin_name - the name of the plugin, without \"seal_\" at the beginning or \".lua\" at the end\n * file - the file where the plugin code is stored.\n\nReturns:\n * The Seal object if the plugin was successfully loaded, `nil` otherwise\n\nNotes:\n * You should normally use `Seal:loadPlugins()`. This method allows you to load plugins\n   from non-standard locations and is mostly a development interface.\n * Some plugins may immediately begin doing background work (e.g. Spotlight searches)",
        "notes" : [
          " * You should normally use `Seal:loadPlugins()`. This method allows you to load plugins",
          "   from non-standard locations and is mostly a development interface.",
          " * Some plugins may immediately begin doing background work (e.g. Spotlight searches)"
        ],
        "signature" : "Seal:loadPluginFromFile(plugin_name, file)",
        "type" : "Method",
        "returns" : [
          " * The Seal object if the plugin was successfully loaded, `nil` otherwise",
          ""
        ],
        "def" : "Seal:loadPluginFromFile(plugin_name, file)",
        "parameters" : [
          " * plugin_name - the name of the plugin, without \"seal_\" at the beginning or \".lua\" at the end",
          " * file - the file where the plugin code is stored.",
          ""
        ]
      },
      {
        "name" : "loadPlugins",
        "desc" : "Loads a list of Seal plugins",
        "stripped_doc" : [
          "Loads a list of Seal plugins",
          ""
        ],
        "doc" : "Loads a list of Seal plugins\n\nParameters:\n * plugins - A list containing the names of plugins to load\n\nReturns:\n * The Seal object\n\nNotes:\n * The plugins live inside the Seal.spoon directory\n * The plugin names in the list, should not have `seal_` at the start, or `.lua` at the end\n * Some plugins may immediately begin doing background work (e.g. Spotlight searches)",
        "notes" : [
          " * The plugins live inside the Seal.spoon directory",
          " * The plugin names in the list, should not have `seal_` at the start, or `.lua` at the end",
          " * Some plugins may immediately begin doing background work (e.g. Spotlight searches)"
        ],
        "signature" : "Seal:loadPlugins(plugins)",
        "type" : "Method",
        "returns" : [
          " * The Seal object",
          ""
        ],
        "def" : "Seal:loadPlugins(plugins)",
        "parameters" : [
          " * plugins - A list containing the names of plugins to load",
          ""
        ]
      },
      {
        "name" : "bindHotkeys",
        "desc" : "Binds hotkeys for Seal",
        "stripped_doc" : [
          "Binds hotkeys for Seal",
          ""
        ],
        "doc" : "Binds hotkeys for Seal\n\nParameters:\n * mapping - A table containing hotkey modifier\/key details for the following (optional) items:\n  * show - This will cause Seal's UI to be shown\n  * toggle - This will cause Seal's UI to be shown or hidden depending on its current state\n\nReturns:\n * The Seal object",
        "notes" : [

        ],
        "signature" : "Seal:bindHotkeys(mapping)",
        "type" : "Method",
        "returns" : [
          " * The Seal object"
        ],
        "def" : "Seal:bindHotkeys(mapping)",
        "parameters" : [
          " * mapping - A table containing hotkey modifier\/key details for the following (optional) items:",
          "  * show - This will cause Seal's UI to be shown",
          "  * toggle - This will cause Seal's UI to be shown or hidden depending on its current state",
          ""
        ]
      },
      {
        "name" : "start",
        "desc" : "Starts Seal",
        "stripped_doc" : [
          "Starts Seal",
          ""
        ],
        "doc" : "Starts Seal\n\nParameters:\n * None\n\nReturns:\n * The Seal object",
        "notes" : [

        ],
        "signature" : "Seal:start()",
        "type" : "Method",
        "returns" : [
          " * The Seal object"
        ],
        "def" : "Seal:start()",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "name" : "stop",
        "desc" : "Stops Seal",
        "stripped_doc" : [
          "Stops Seal",
          ""
        ],
        "doc" : "Stops Seal\n\nParameters:\n * None\n\nReturns:\n * The Seal object\n\nNotes:\n * Some Seal plugins will continue performing background work even after this call (e.g. Spotlight searches)",
        "notes" : [
          " * Some Seal plugins will continue performing background work even after this call (e.g. Spotlight searches)"
        ],
        "signature" : "Seal:stop()",
        "type" : "Method",
        "returns" : [
          " * The Seal object",
          ""
        ],
        "def" : "Seal:stop()",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "name" : "show",
        "desc" : "Shows the Seal UI",
        "stripped_doc" : [
          "Shows the Seal UI",
          ""
        ],
        "doc" : "Shows the Seal UI\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * This may be useful if you wish to show Seal in response to something other than its hotkey",
        "notes" : [
          " * This may be useful if you wish to show Seal in response to something other than its hotkey"
        ],
        "signature" : "Seal:show()",
        "type" : "Method",
        "returns" : [
          " * None",
          ""
        ],
        "def" : "Seal:show()",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "name" : "toggle",
        "desc" : "Shows or hides the Seal UI",
        "stripped_doc" : [
          "Shows or hides the Seal UI",
          ""
        ],
        "doc" : "Shows or hides the Seal UI\n\nParameters:\n * None\n\nReturns:\n * None",
        "notes" : [

        ],
        "signature" : "Seal:toggle()",
        "type" : "Method",
        "returns" : [
          " * None"
        ],
        "def" : "Seal:toggle()",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "doc" : "Pluggable launch bar\n\nDownload: [https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/Seal.spoon.zip](https:\/\/github.com\/Hammerspoon\/Spoons\/raw\/master\/Spoons\/Seal.spoon.zip)\n\nSeal includes a number of plugins, which you can choose to load (see `:loadPlugins()` below):\n * apps : Launch applications by name\n * safari_bookmarks : Open Safari bookmarks (this is broken since at least High Sierra)\n * calc : Simple calculator\n * vpn : Connect and disconnect VPNs (currently supports Viscosity and macOS system preferences)A\n * useractions : User defined custom actions\n * screencapture : Lets you take screenshots in various ways\n * urlformats : User defined URL formats to open",
    "Field" : [

    ],
    "Command" : [

    ],
    "name" : "Seal"
  },
  {
    "Constant" : [

    ],
    "submodules" : [
      "urlformats",
      "useractions"
    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "name" : "safari_bookmarks",
        "desc" : "If `true` (default), bookmarks are always opened with Safari, otherwise they are opened with the default application using the `\/usr\/bin\/open` command.",
        "stripped_doc" : [
          "If `true` (default), bookmarks are always opened with Safari, otherwise they are opened with the default application using the `\/usr\/bin\/open` command."
        ],
        "doc" : "If `true` (default), bookmarks are always opened with Safari, otherwise they are opened with the default application using the `\/usr\/bin\/open` command.",
        "notes" : [

        ],
        "signature" : "Seal.plugins.safari_bookmarks.always_open_with_safari",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Seal.plugins.safari_bookmarks.always_open_with_safari",
        "parameters" : [

        ]
      }
    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "desc" : "Various APIs for Seal plugins",
    "type" : "Module",
    "Constructor" : [

    ],
    "items" : [
      {
        "name" : "safari_bookmarks",
        "desc" : "If `true` (default), bookmarks are always opened with Safari, otherwise they are opened with the default application using the `\/usr\/bin\/open` command.",
        "stripped_doc" : [
          "If `true` (default), bookmarks are always opened with Safari, otherwise they are opened with the default application using the `\/usr\/bin\/open` command."
        ],
        "doc" : "If `true` (default), bookmarks are always opened with Safari, otherwise they are opened with the default application using the `\/usr\/bin\/open` command.",
        "notes" : [

        ],
        "signature" : "Seal.plugins.safari_bookmarks.always_open_with_safari",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Seal.plugins.safari_bookmarks.always_open_with_safari",
        "parameters" : [

        ]
      }
    ],
    "Method" : [

    ],
    "doc" : "Various APIs for Seal plugins",
    "Field" : [

    ],
    "Command" : [

    ],
    "name" : "Seal.plugins"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "desc" : "A plugin to quickly open URLs containing a search\/query term",
    "type" : "Module",
    "Constructor" : [

    ],
    "items" : [
      {
        "name" : "providersTable",
        "desc" : "Gets or sets the current providers table",
        "stripped_doc" : [
          "Gets or sets the current providers table",
          ""
        ],
        "doc" : "Gets or sets the current providers table\n\nParameters:\n * aTable - An optional table of providers, which must contain the following keys:\n   * name - A string naming the provider, which will be shown in the Seal results\n   * url - A string containing the URL to insert the user's query into. This should contain one and only one `%s`\n\nReturns:\n * Either a table of current providers, if no parameter was passed, or nothing if a parmameter was passed.\n\nNotes:\n * An example table might look like:\n```lua\n{\n  rhbz = { name = \"Red Hat Bugzilla\", url = \"https:\/\/bugzilla.redhat.com\/show_bug.cgi?id=%s\", },\n  lp = { name = \"Launchpad Bug\", url = \"https:\/\/launchpad.net\/bugs\/%s\", },\n}\n```",
        "notes" : [
          " * An example table might look like:",
          "```lua",
          "{",
          "  rhbz = { name = \"Red Hat Bugzilla\", url = \"https:\/\/bugzilla.redhat.com\/show_bug.cgi?id=%s\", },",
          "  lp = { name = \"Launchpad Bug\", url = \"https:\/\/launchpad.net\/bugs\/%s\", },",
          "}",
          "```"
        ],
        "signature" : "Seal.plugins.urlformats:providersTable(aTable)",
        "type" : "Method",
        "returns" : [
          " * Either a table of current providers, if no parameter was passed, or nothing if a parmameter was passed.",
          ""
        ],
        "def" : "Seal.plugins.urlformats:providersTable(aTable)",
        "parameters" : [
          " * aTable - An optional table of providers, which must contain the following keys:",
          "   * name - A string naming the provider, which will be shown in the Seal results",
          "   * url - A string containing the URL to insert the user's query into. This should contain one and only one `%s`",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "name" : "providersTable",
        "desc" : "Gets or sets the current providers table",
        "stripped_doc" : [
          "Gets or sets the current providers table",
          ""
        ],
        "doc" : "Gets or sets the current providers table\n\nParameters:\n * aTable - An optional table of providers, which must contain the following keys:\n   * name - A string naming the provider, which will be shown in the Seal results\n   * url - A string containing the URL to insert the user's query into. This should contain one and only one `%s`\n\nReturns:\n * Either a table of current providers, if no parameter was passed, or nothing if a parmameter was passed.\n\nNotes:\n * An example table might look like:\n```lua\n{\n  rhbz = { name = \"Red Hat Bugzilla\", url = \"https:\/\/bugzilla.redhat.com\/show_bug.cgi?id=%s\", },\n  lp = { name = \"Launchpad Bug\", url = \"https:\/\/launchpad.net\/bugs\/%s\", },\n}\n```",
        "notes" : [
          " * An example table might look like:",
          "```lua",
          "{",
          "  rhbz = { name = \"Red Hat Bugzilla\", url = \"https:\/\/bugzilla.redhat.com\/show_bug.cgi?id=%s\", },",
          "  lp = { name = \"Launchpad Bug\", url = \"https:\/\/launchpad.net\/bugs\/%s\", },",
          "}",
          "```"
        ],
        "signature" : "Seal.plugins.urlformats:providersTable(aTable)",
        "type" : "Method",
        "returns" : [
          " * Either a table of current providers, if no parameter was passed, or nothing if a parmameter was passed.",
          ""
        ],
        "def" : "Seal.plugins.urlformats:providersTable(aTable)",
        "parameters" : [
          " * aTable - An optional table of providers, which must contain the following keys:",
          "   * name - A string naming the provider, which will be shown in the Seal results",
          "   * url - A string containing the URL to insert the user's query into. This should contain one and only one `%s`",
          ""
        ]
      }
    ],
    "doc" : "A plugin to quickly open URLs containing a search\/query term\nThis plugin is invoked with the `uf` keyword and requires some configuration, see `:providersTable()`\n\nThe way this works is by defining a set of providers, each of which contains a URL with a `%s` somewhere insert it.\nWhen the user types `uf` in Seal, followed by some more characters, those characters will be inserted into the string at the point where the `%s` is.\n\nBy way of an example, you could define a provider with a url like `http:\/\/bugs.mycorp.com\/showBug?id=%s`, and just need to type `uf 123456` in Seal to get a quick shortcut to open the full URL.",
    "Field" : [

    ],
    "Command" : [

    ],
    "name" : "Seal.plugins.urlformats"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "name" : "actions",
        "desc" : "",
        "stripped_doc" : [
          "A table containing the definitions of static user-defined actions. Each entry is indexed by the name of the entry as it will be shown in the chooser. Its value is a table which can have the following keys (one of `fn` or `url` is required. If both are provided, `url` is ignored):",
          " * fn - A function which will be called when the entry is selected. The function receives no arguments.",
          " * url - A URL which will be opened when the entry is selected. Can also be non-HTTP URLs, such as `mailto:` or other app-specific URLs.",
          " * icon - (optional) An `hs.image` object that will be shown next to the entry in the chooser. If not provided, `Seal.plugins.useractions.default_icon` is used. For `url` bookmarks, it can be set to `\"favicon\"` to fetch and use the website's favicon.",
          " * keyword - (optional) A command by which this action will be invoked, effectively turning it into a Seal command. Any arguments passed to the command will be handled as follows:",
          "   * For `fn` actions, passed as an argument to the function",
          "   * For `url` actions, substituted into the URL, taking the place of any occurrences of `${query}`.",
          " * hotkey - (optional) A hotkey specification in the form `{ modifiers, key }` by which this action can be invoked.",
          "",
          "Example configuration:",
          "```",
          "spoon.Seal:loadPlugins({\"useractions\"})",
          "spoon.Seal.plugins.useractions.actions =",
          "   {",
          "      [\"Hammerspoon docs webpage\"] = {",
          "         url = \"http:\/\/hammerspoon.org\/docs\/\",",
          "         icon = hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon),",
          "         hotkey = { hyper, \"h\" }",
          "      },",
          "      [\"Leave corpnet\"] = {",
          "         fn = function()",
          "            spoon.WiFiTransitions:processTransition('foo', 'corpnet01')",
          "         end,",
          "      },",
          "      [\"Arrive in corpnet\"] = {",
          "         fn = function()",
          "            spoon.WiFiTransitions:processTransition('corpnet01', 'foo')",
          "         end,",
          "      },",
          "      [\"Translate using Leo\"] = {",
          "         url = \"http:\/\/dict.leo.org\/ende\/index_de.html#\/search=${query}\",",
          "         icon = 'favicon',",
          "         keyword = \"leo\",",
          "      },",
          "      [\"Tell me something\"] = {",
          "         keyword = \"tellme\",",
          "         fn = function(str) hs.alert.show(str) end,",
          "      }",
          "```"
        ],
        "doc" : "A table containing the definitions of static user-defined actions. Each entry is indexed by the name of the entry as it will be shown in the chooser. Its value is a table which can have the following keys (one of `fn` or `url` is required. If both are provided, `url` is ignored):\n * fn - A function which will be called when the entry is selected. The function receives no arguments.\n * url - A URL which will be opened when the entry is selected. Can also be non-HTTP URLs, such as `mailto:` or other app-specific URLs.\n * icon - (optional) An `hs.image` object that will be shown next to the entry in the chooser. If not provided, `Seal.plugins.useractions.default_icon` is used. For `url` bookmarks, it can be set to `\"favicon\"` to fetch and use the website's favicon.\n * keyword - (optional) A command by which this action will be invoked, effectively turning it into a Seal command. Any arguments passed to the command will be handled as follows:\n   * For `fn` actions, passed as an argument to the function\n   * For `url` actions, substituted into the URL, taking the place of any occurrences of `${query}`.\n * hotkey - (optional) A hotkey specification in the form `{ modifiers, key }` by which this action can be invoked.\n\nExample configuration:\n```\nspoon.Seal:loadPlugins({\"useractions\"})\nspoon.Seal.plugins.useractions.actions =\n   {\n      [\"Hammerspoon docs webpage\"] = {\n         url = \"http:\/\/hammerspoon.org\/docs\/\",\n         icon = hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon),\n         hotkey = { hyper, \"h\" }\n      },\n      [\"Leave corpnet\"] = {\n         fn = function()\n            spoon.WiFiTransitions:processTransition('foo', 'corpnet01')\n         end,\n      },\n      [\"Arrive in corpnet\"] = {\n         fn = function()\n            spoon.WiFiTransitions:processTransition('corpnet01', 'foo')\n         end,\n      },\n      [\"Translate using Leo\"] = {\n         url = \"http:\/\/dict.leo.org\/ende\/index_de.html#\/search=${query}\",\n         icon = 'favicon',\n         keyword = \"leo\",\n      },\n      [\"Tell me something\"] = {\n         keyword = \"tellme\",\n         fn = function(str) hs.alert.show(str) end,\n      }\n```",
        "notes" : [

        ],
        "signature" : "Seal.plugins.useractions.actions",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Seal.plugins.useractions.actions",
        "parameters" : [

        ]
      },
      {
        "name" : "get_favicon",
        "desc" : "",
        "stripped_doc" : [
          "If `true`, attempt to obtain the favicon for URLs added through the `add` command, and use it in the chooser."
        ],
        "doc" : "If `true`, attempt to obtain the favicon for URLs added through the `add` command, and use it in the chooser.",
        "notes" : [

        ],
        "signature" : "Seal.plugins.useractions.get_favicon",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Seal.plugins.useractions.get_favicon",
        "parameters" : [

        ]
      }
    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "desc" : "Allow accessing user-defined bookmarks and arbitrary actions from Seal.",
    "type" : "Module",
    "Constructor" : [

    ],
    "items" : [
      {
        "name" : "actions",
        "desc" : "",
        "stripped_doc" : [
          "A table containing the definitions of static user-defined actions. Each entry is indexed by the name of the entry as it will be shown in the chooser. Its value is a table which can have the following keys (one of `fn` or `url` is required. If both are provided, `url` is ignored):",
          " * fn - A function which will be called when the entry is selected. The function receives no arguments.",
          " * url - A URL which will be opened when the entry is selected. Can also be non-HTTP URLs, such as `mailto:` or other app-specific URLs.",
          " * icon - (optional) An `hs.image` object that will be shown next to the entry in the chooser. If not provided, `Seal.plugins.useractions.default_icon` is used. For `url` bookmarks, it can be set to `\"favicon\"` to fetch and use the website's favicon.",
          " * keyword - (optional) A command by which this action will be invoked, effectively turning it into a Seal command. Any arguments passed to the command will be handled as follows:",
          "   * For `fn` actions, passed as an argument to the function",
          "   * For `url` actions, substituted into the URL, taking the place of any occurrences of `${query}`.",
          " * hotkey - (optional) A hotkey specification in the form `{ modifiers, key }` by which this action can be invoked.",
          "",
          "Example configuration:",
          "```",
          "spoon.Seal:loadPlugins({\"useractions\"})",
          "spoon.Seal.plugins.useractions.actions =",
          "   {",
          "      [\"Hammerspoon docs webpage\"] = {",
          "         url = \"http:\/\/hammerspoon.org\/docs\/\",",
          "         icon = hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon),",
          "         hotkey = { hyper, \"h\" }",
          "      },",
          "      [\"Leave corpnet\"] = {",
          "         fn = function()",
          "            spoon.WiFiTransitions:processTransition('foo', 'corpnet01')",
          "         end,",
          "      },",
          "      [\"Arrive in corpnet\"] = {",
          "         fn = function()",
          "            spoon.WiFiTransitions:processTransition('corpnet01', 'foo')",
          "         end,",
          "      },",
          "      [\"Translate using Leo\"] = {",
          "         url = \"http:\/\/dict.leo.org\/ende\/index_de.html#\/search=${query}\",",
          "         icon = 'favicon',",
          "         keyword = \"leo\",",
          "      },",
          "      [\"Tell me something\"] = {",
          "         keyword = \"tellme\",",
          "         fn = function(str) hs.alert.show(str) end,",
          "      }",
          "```"
        ],
        "doc" : "A table containing the definitions of static user-defined actions. Each entry is indexed by the name of the entry as it will be shown in the chooser. Its value is a table which can have the following keys (one of `fn` or `url` is required. If both are provided, `url` is ignored):\n * fn - A function which will be called when the entry is selected. The function receives no arguments.\n * url - A URL which will be opened when the entry is selected. Can also be non-HTTP URLs, such as `mailto:` or other app-specific URLs.\n * icon - (optional) An `hs.image` object that will be shown next to the entry in the chooser. If not provided, `Seal.plugins.useractions.default_icon` is used. For `url` bookmarks, it can be set to `\"favicon\"` to fetch and use the website's favicon.\n * keyword - (optional) A command by which this action will be invoked, effectively turning it into a Seal command. Any arguments passed to the command will be handled as follows:\n   * For `fn` actions, passed as an argument to the function\n   * For `url` actions, substituted into the URL, taking the place of any occurrences of `${query}`.\n * hotkey - (optional) A hotkey specification in the form `{ modifiers, key }` by which this action can be invoked.\n\nExample configuration:\n```\nspoon.Seal:loadPlugins({\"useractions\"})\nspoon.Seal.plugins.useractions.actions =\n   {\n      [\"Hammerspoon docs webpage\"] = {\n         url = \"http:\/\/hammerspoon.org\/docs\/\",\n         icon = hs.image.imageFromName(hs.image.systemImageNames.ApplicationIcon),\n         hotkey = { hyper, \"h\" }\n      },\n      [\"Leave corpnet\"] = {\n         fn = function()\n            spoon.WiFiTransitions:processTransition('foo', 'corpnet01')\n         end,\n      },\n      [\"Arrive in corpnet\"] = {\n         fn = function()\n            spoon.WiFiTransitions:processTransition('corpnet01', 'foo')\n         end,\n      },\n      [\"Translate using Leo\"] = {\n         url = \"http:\/\/dict.leo.org\/ende\/index_de.html#\/search=${query}\",\n         icon = 'favicon',\n         keyword = \"leo\",\n      },\n      [\"Tell me something\"] = {\n         keyword = \"tellme\",\n         fn = function(str) hs.alert.show(str) end,\n      }\n```",
        "notes" : [

        ],
        "signature" : "Seal.plugins.useractions.actions",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Seal.plugins.useractions.actions",
        "parameters" : [

        ]
      },
      {
        "name" : "get_favicon",
        "desc" : "",
        "stripped_doc" : [
          "If `true`, attempt to obtain the favicon for URLs added through the `add` command, and use it in the chooser."
        ],
        "doc" : "If `true`, attempt to obtain the favicon for URLs added through the `add` command, and use it in the chooser.",
        "notes" : [

        ],
        "signature" : "Seal.plugins.useractions.get_favicon",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Seal.plugins.useractions.get_favicon",
        "parameters" : [

        ]
      }
    ],
    "Method" : [

    ],
    "doc" : "Allow accessing user-defined bookmarks and arbitrary actions from Seal.",
    "Field" : [

    ],
    "Command" : [

    ],
    "name" : "Seal.plugins.useractions"
  }
]