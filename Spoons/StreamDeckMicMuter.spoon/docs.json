[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "Sets up a button on an Elgato Stream Deck to mute\/unmute all mics",
    "type" : "Module",
    "Deprecated" : [

    ],
    "Constructor" : [

    ],
    "items" : [
      {
        "def" : "StreamDeckMicMuter:setMute(shouldMute)",
        "stripped_doc" : [
          "Sets the mute\/unmute state",
          ""
        ],
        "parameters" : [
          " * shouldMute - A boolean, true to set mute state, false to unmute",
          ""
        ],
        "doc" : "Sets the mute\/unmute state\n\nParameters:\n * shouldMute - A boolean, true to set mute state, false to unmute\n\nReturns:\n * The StreamDeckMicMuter object",
        "notes" : [

        ],
        "signature" : "StreamDeckMicMuter:setMute(shouldMute)",
        "type" : "Method",
        "returns" : [
          " * The StreamDeckMicMuter object"
        ],
        "name" : "setMute",
        "desc" : "Sets the mute\/unmute state"
      },
      {
        "def" : "StreamDeckMicMuter:start(deck, button)",
        "stripped_doc" : [
          "Starts StreamDeckMicMuter",
          ""
        ],
        "parameters" : [
          " * deck - An hs.streamdeck object",
          " * button - A number from 1 to 15 representing the button to use",
          " * state - An optional boolean, true to start muted, false to start unmuted (Defaults to true)",
          ""
        ],
        "doc" : "Starts StreamDeckMicMuter\n\nParameters:\n * deck - An hs.streamdeck object\n * button - A number from 1 to 15 representing the button to use\n * state - An optional boolean, true to start muted, false to start unmuted (Defaults to true)\n\nReturns:\n * The StreamDeckMicMuter object\n\nNotes:\n * This Spoon relies on hs.audiodevice.watcher to track any changes in audiodevices attached to the system, however, only one callback can be attached to hs.audiodevice.watcher, so rather than try and claim exclusive use of it, we expect you to create an hs.watchable proxy in your init.lua, like this:\n  ```lua\n  audiodeviceWatchable = hs.watchable.new(\"audiodevice\")\n  function audiodeviceDeviceCallback(event)\n    audiodeviceWatchable[\"event\"] = event\n  end\n  hs.audiodevice.watcher.setCallback(audiodeviceDeviceCallback)\n  hs.audiodevice.watcher.start()\n  ```",
        "notes" : [
          " * This Spoon relies on hs.audiodevice.watcher to track any changes in audiodevices attached to the system, however, only one callback can be attached to hs.audiodevice.watcher, so rather than try and claim exclusive use of it, we expect you to create an hs.watchable proxy in your init.lua, like this:",
          "  ```lua",
          "  audiodeviceWatchable = hs.watchable.new(\"audiodevice\")",
          "  function audiodeviceDeviceCallback(event)",
          "    audiodeviceWatchable[\"event\"] = event",
          "  end",
          "  hs.audiodevice.watcher.setCallback(audiodeviceDeviceCallback)",
          "  hs.audiodevice.watcher.start()",
          "  ```"
        ],
        "signature" : "StreamDeckMicMuter:start(deck, button)",
        "type" : "Method",
        "returns" : [
          " * The StreamDeckMicMuter object",
          ""
        ],
        "name" : "start",
        "desc" : "Starts StreamDeckMicMuter"
      },
      {
        "def" : "StreamDeckMicMuter:stop()",
        "stripped_doc" : [
          "Stops StreamDeckMicMuter",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "doc" : "Stops StreamDeckMicMuter\n\nParameters:\n * None\n\nReturns:\n * The StreamDeckMicMuter object",
        "notes" : [

        ],
        "signature" : "StreamDeckMicMuter:stop()",
        "type" : "Method",
        "returns" : [
          " * The StreamDeckMicMuter object"
        ],
        "name" : "stop",
        "desc" : "Stops StreamDeckMicMuter"
      },
      {
        "def" : "StreamDeckMicMuter:toggleMute()",
        "stripped_doc" : [
          "Toggles the current mute state",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "doc" : "Toggles the current mute state\n\nParameters:\n * None\n\nReturns:\n * The StreamDeckMicMuter object",
        "notes" : [

        ],
        "signature" : "StreamDeckMicMuter:toggleMute()",
        "type" : "Method",
        "returns" : [
          " * The StreamDeckMicMuter object"
        ],
        "name" : "toggleMute",
        "desc" : "Toggles the current mute state"
      }
    ],
    "Method" : [
      {
        "def" : "StreamDeckMicMuter:start(deck, button)",
        "stripped_doc" : [
          "Starts StreamDeckMicMuter",
          ""
        ],
        "parameters" : [
          " * deck - An hs.streamdeck object",
          " * button - A number from 1 to 15 representing the button to use",
          " * state - An optional boolean, true to start muted, false to start unmuted (Defaults to true)",
          ""
        ],
        "doc" : "Starts StreamDeckMicMuter\n\nParameters:\n * deck - An hs.streamdeck object\n * button - A number from 1 to 15 representing the button to use\n * state - An optional boolean, true to start muted, false to start unmuted (Defaults to true)\n\nReturns:\n * The StreamDeckMicMuter object\n\nNotes:\n * This Spoon relies on hs.audiodevice.watcher to track any changes in audiodevices attached to the system, however, only one callback can be attached to hs.audiodevice.watcher, so rather than try and claim exclusive use of it, we expect you to create an hs.watchable proxy in your init.lua, like this:\n  ```lua\n  audiodeviceWatchable = hs.watchable.new(\"audiodevice\")\n  function audiodeviceDeviceCallback(event)\n    audiodeviceWatchable[\"event\"] = event\n  end\n  hs.audiodevice.watcher.setCallback(audiodeviceDeviceCallback)\n  hs.audiodevice.watcher.start()\n  ```",
        "notes" : [
          " * This Spoon relies on hs.audiodevice.watcher to track any changes in audiodevices attached to the system, however, only one callback can be attached to hs.audiodevice.watcher, so rather than try and claim exclusive use of it, we expect you to create an hs.watchable proxy in your init.lua, like this:",
          "  ```lua",
          "  audiodeviceWatchable = hs.watchable.new(\"audiodevice\")",
          "  function audiodeviceDeviceCallback(event)",
          "    audiodeviceWatchable[\"event\"] = event",
          "  end",
          "  hs.audiodevice.watcher.setCallback(audiodeviceDeviceCallback)",
          "  hs.audiodevice.watcher.start()",
          "  ```"
        ],
        "signature" : "StreamDeckMicMuter:start(deck, button)",
        "type" : "Method",
        "returns" : [
          " * The StreamDeckMicMuter object",
          ""
        ],
        "name" : "start",
        "desc" : "Starts StreamDeckMicMuter"
      },
      {
        "def" : "StreamDeckMicMuter:stop()",
        "stripped_doc" : [
          "Stops StreamDeckMicMuter",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "doc" : "Stops StreamDeckMicMuter\n\nParameters:\n * None\n\nReturns:\n * The StreamDeckMicMuter object",
        "notes" : [

        ],
        "signature" : "StreamDeckMicMuter:stop()",
        "type" : "Method",
        "returns" : [
          " * The StreamDeckMicMuter object"
        ],
        "name" : "stop",
        "desc" : "Stops StreamDeckMicMuter"
      },
      {
        "def" : "StreamDeckMicMuter:setMute(shouldMute)",
        "stripped_doc" : [
          "Sets the mute\/unmute state",
          ""
        ],
        "parameters" : [
          " * shouldMute - A boolean, true to set mute state, false to unmute",
          ""
        ],
        "doc" : "Sets the mute\/unmute state\n\nParameters:\n * shouldMute - A boolean, true to set mute state, false to unmute\n\nReturns:\n * The StreamDeckMicMuter object",
        "notes" : [

        ],
        "signature" : "StreamDeckMicMuter:setMute(shouldMute)",
        "type" : "Method",
        "returns" : [
          " * The StreamDeckMicMuter object"
        ],
        "name" : "setMute",
        "desc" : "Sets the mute\/unmute state"
      },
      {
        "def" : "StreamDeckMicMuter:toggleMute()",
        "stripped_doc" : [
          "Toggles the current mute state",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "doc" : "Toggles the current mute state\n\nParameters:\n * None\n\nReturns:\n * The StreamDeckMicMuter object",
        "notes" : [

        ],
        "signature" : "StreamDeckMicMuter:toggleMute()",
        "type" : "Method",
        "returns" : [
          " * The StreamDeckMicMuter object"
        ],
        "name" : "toggleMute",
        "desc" : "Toggles the current mute state"
      }
    ],
    "doc" : "Sets up a button on an Elgato Stream Deck to mute\/unmute all mics\n\nNotes:\n * This Spoon uses hs.audiodevice.watcherCallback which means it will conflict with any other Spoons that also use that callback, or your init.lua if you use it there. If this is a problem, please file a bug",
    "Field" : [

    ],
    "Command" : [

    ],
    "name" : "StreamDeckMicMuter"
  }
]